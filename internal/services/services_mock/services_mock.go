// Code generated by MockGen. DO NOT EDIT.
// Source: services.go

// Package services_mock is a generated GoMock package.
package services_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCounterServiceInterface is a mock of CounterServiceInterface interface.
type MockCounterServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCounterServiceInterfaceMockRecorder
}

// MockCounterServiceInterfaceMockRecorder is the mock recorder for MockCounterServiceInterface.
type MockCounterServiceInterfaceMockRecorder struct {
	mock *MockCounterServiceInterface
}

// NewMockCounterServiceInterface creates a new mock instance.
func NewMockCounterServiceInterface(ctrl *gomock.Controller) *MockCounterServiceInterface {
	mock := &MockCounterServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCounterServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterServiceInterface) EXPECT() *MockCounterServiceInterfaceMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockCounterServiceInterface) Dump() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump")
	ret0, _ := ret[0].(error)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockCounterServiceInterfaceMockRecorder) Dump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockCounterServiceInterface)(nil).Dump))
}

// Hit mocks base method.
func (m *MockCounterServiceInterface) Hit() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hit")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Hit indicates an expected call of Hit.
func (mr *MockCounterServiceInterfaceMockRecorder) Hit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hit", reflect.TypeOf((*MockCounterServiceInterface)(nil).Hit))
}
